#!/bin/sh

# Package
PACKAGE="cubeSQL"
# Others
SSS="/var/packages/${PACKAGE}/scripts/start-stop-status"
PKG_DIR="/var/packages/${PACKAGE}"
PKG_TARGET="${PKG_DIR}/target"
PKG_URL="${WIZARD_DL_URL}"
PKG_ARCHIVE="${PKG_URL##*/}"
ScriptDir="$(dirname "$0")"

download_cubeSQL ()
{
  # Create tmp dir to extract cubeSQL archive and enter dir
  TMP_DIR=`( mktemp -d /tmp/cube.XXXXXXXXXX)`
  pushd "${TMP_DIR}" > /dev/null

# Download cubeSQL archive  
  curl -s -O "${PKG_URL}"  # Need implement status code check
  R=$?

# Proceed if download succeeded. Extract to tmp dir, move extracted files to target dir  
  if [ $R -eq 0 ]; then
    mkdir "${SYNOPKG_PKGINST_TEMP_DIR}"/"${PACKAGE}"
    tar -zxvf "${PKG_ARCHIVE}" -C "${TMP_DIR}" > /dev/null
    R=$?
    rm -f "${TMP_DIR}/${PKG_ARCHIVE}"
    mv ${TMP_DIR}/*/* "${SYNOPKG_PKGINST_TEMP_DIR}/${PACKAGE}"
    rm -Rf "${TMP_DIR}"
    rm -f "${PKG_ARCHIVE}"
    if [ $R -ne 0 ]; then
      MESSAGE="Extracting cubeSQL files from archive failed."
    fi
  else
    rm -f "${PKG_ARCHIVE}"
    MESSAGE="The download of the specified cubeSQL version failed. Please check your internet connection."
  fi
  
  popd > /dev/null

  if [ $R -ne 0 ]; then
    echo "$MESSAGE"
  fi
}

preinst ()
{
  if [ "${SYNOPKG_PKG_STATUS}" != "UPGRADE" ]; then 
    download_cubeSQL
  fi
  return $R
}

postinst ()
{
  # Wizard will ask for cubeSQL share if cubeSQL share does not exist 
  if [ ! -f ${PKG_DIR}/etc/cubeSQL.ini ]; then
    echo "[General]" > "${PKG_DIR}/etc/cubeSQL.ini"
    echo "cubesql_storage=$WIZARD_DATABASE_DIR" >> "${PKG_DIR}/etc/cubeSQL.ini"
  fi
  
  # Create required folders when performing clean install
  if [ "${SYNOPKG_PKG_STATUS}" != "UPGRADE" ]; then
    STORAGE_PATH=$($ScriptDir/getsharelocation "${WIZARD_DATABASE_DIR}")
    [ ! -d "$STORAGE_PATH/cubeSQL" ] && mkdir "$STORAGE_PATH/cubeSQL" && NoCubeSQLParentFolder=false || NoCubeSQLParentFolder=true
  fi
  
  # Migrate data when updating or DSM6 folder structure has been identified
  if $WIZARD_MIGRATE_DB && $NoCubeSQLParentFolder; then
    #Check absolute path of DSM6 styled shared folder
    DSM6_STORAGE_PATH=$($ScriptDir/getsharelocation cubeSQL)
  
    ## Copy old cubeSQL files to new specified directory to fix ownership
    [ -d "${DSM6_STORAGE_PATH}/databases" ]  && cp -R "${DSM6_STORAGE_PATH}/databases" "${STORAGE_PATH}/cubeSQL/data"
    [ -d "${DSM6_STORAGE_PATH}/settings" ] && cp -R "${DSM6_STORAGE_PATH}/settings" "${STORAGE_PATH}/cubeSQL/settings"
  fi 

  return 0
}

preuninst ()
{
    # Stop the package
    ${SSS} stop > /dev/null
    
    exit 0
    
}

postuninst ()
{
    # Delete Package directory if it contains nothing.
    if [ ! -d "$(ls -A /usr/syno/etc/packages/${PACKAGE})" ]; then
        rm -Rf /usr/syno/etc/packages/${PACKAGE}
    fi

    exit 0
}

preupgrade ()
{
  ## Move cubeSQL executable files to temp dir.
  if [ -d "${SYNOPKG_PKGDEST}/cubeSQL" ] && [ "${PKG_URL}" == "KEEP" ]; then
    mv ${SYNOPKG_PKGDEST}/cubeSQL ${SYNOPKG_PKGINST_TEMP_DIR}/cubeSQL
    R=$?
  else
    download_cubeSQL
  fi
  return $R
}

postupgrade ()
{
  # Wizard will only ask for cubeSQL share if cubeSQL share does not exist 
  if [ ! -f ${PKG_DIR}/etc/cubeSQL.ini ]; then
    echo "[General]" > "${PKG_DIR}/etc/cubeSQL.ini"
    echo "cubesql_storage=$WIZARD_DATABASE_DIR" >> "${PKG_DIR}/etc/cubeSQL.ini"
  fi
  
  # Create required folders when performing clean install
    STORAGE_PATH=$($ScriptDir/getsharelocation "${WIZARD_DATABASE_DIR}")
    [ ! -d "$STORAGE_PATH/cubeSQL" ] && mkdir "$STORAGE_PATH/cubeSQL" && NoCubeSQLParentFolder=true || NoCubeSQLParentFolder=false
  
  # Migrate data when updating or DSM6 folder structure has been identified
  if [ ${WIZARD_DATABASE_DIR} == "cubeSQL" ]; then
    if $WIZARD_MIGRATE_DB && $NoCubeSQLParentFolder; then
      #Check absolute path of DSM6 styled shared folder
      DSM6_STORAGE_PATH=$($ScriptDir/getsharelocation cubeSQL)
      echo DSM6_STORAGE_PATH >> /tmp/csql_debug.txt
      ## Copy old cubeSQL files to new specified directory to fix ownership
      [ -d "${DSM6_STORAGE_PATH}/databases" ]  && cp -R "${DSM6_STORAGE_PATH}/databases" "${STORAGE_PATH}/cubeSQL/data"
      [ -d "${DSM6_STORAGE_PATH}/settings" ] && cp -R "${DSM6_STORAGE_PATH}/settings" "${STORAGE_PATH}/cubeSQL/settings"
    fi
  fi 
  
    exit 0
}
